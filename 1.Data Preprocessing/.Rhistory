num[1:4, 1:2] 1 2 3 4 5 6 7 8
number[1:4, 1:2] 1 2 3 4 5 6 7 8
numeric(1:4, 1:2) 1 2 3 4 5 6 7 8
example <- matrix(c(1, 2, 3, 4, 5, 6, 7, 8), nrow = 4, ncol = 2)
View(example)
install.packages("swirl")
packageVersion("swirl")
library(swirl)
ls()
rm(list=ls())
swirl()
5+7
x <- 5+7
x
y<-x-3
y
z <- c(1.2,9,3.14)
info()
c(1.1, 9, 3,14)
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z * 2 + 100
my_sqrt(z-1)
my_sqrt <- sqrt(z - 1)
my_sqrt
my_div <- z / my_sqrt
my_div
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3 ,4) + c(0, 10, 100)
z * 2 + 1000
my_div
swirl()
getwd()
ls()
x <- 9
ls()
dir()
list.files
list.files()
list.files
info()
?list.files
args(list.files())
args(list.files)
old.dir <- getwd()
testdir <- dir.create()
dir.create(testdir)
dir.create()
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
ls()
list.files()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R" "mytest2.R")
fil.rename("mytest2.R")
file.rename("mytest2.R")
file.rename("mytest.R","mytest2.R")
file.copy("mtest2.R","mytest3.R")
file.copy("mtest2.R", "mytest3.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
file.path('folder1', 'folder2')
?dir.create
dir.create(testdir2)
dir.create("testdir2")
dir.create(file.path('testdir2', 'testdir3'), recursive = TRUE)
setwd('old.dir')
setwd("old.dir")
setwd(old.dir)
1:20
pi:10
15:1
?':'
seq(1, 20)
seq(0, 10, by=0.5)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(alog.with = my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
reo(0, times = 40)
rep(0, times = 40)
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2), each = 10)
swirl()
1:20
pi:10
15:1
?':'
seq(1, 20)
seq(0, 10, by=0.5)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(alog.with = my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
reo(0, times = 40)
rep(0, times = 40)
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2), each = 10)
1:20
pi:10
15:1
?':'
seq(1, 20)
seq(0, 10, by=0.5)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(alog.with = my_seq)
seq_along(my_seq)
seq(along.with = my_seq)
reo(0, times = 40)
rep(0, times = 40)
seq_along(my_seq)
reo(0, times = 40)
rep(0, times = 40)
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2), each = 10)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
tp <- num_vect >= 6
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "Sarthak")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(c("X", "Y", "Z"), sep = "")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
swirl()
x <- c(44, NA, 5, NA)
x * 3
y <- rnormm(1000)
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y,z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0 / 0
Inf - Inf
x
x[1:10]
x[is.na(x)]
x[!is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
c(x[1,5,7])
c(x[1:8, x / 2 != 0])
x[c(3, 5, 7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my-vector)
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(4, 5, 1:20)
matrix(1:20, 4, 5)
matrix2 <- matrix(1:20, 4, 5)
my_matrix2 <- matrix(1:20, 4, 5)
my_matrix2 <- matrix(1:20, nrow = 4, ncol = 5)
my_matrix2 <- matrix(1:20,nrow = 4,ncol = 5)
skip()
my_matrix2 <- matrix(1:20, nrow=4, ncol=5)
info()
skip()
skip()
bye()
swirl()
my_matrix2 <- matrix(1:20, nrow=4, ncol=5)
identical(my_matrix, my_matrix2)
patients <- names("Bill", "Gina", "Kelly", "Sean")
patients <- names(c("Bill", "Gina", "Kelly", "Sean"))
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- dataframe(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(cnames)
colnames(my_data) <- cnames
my_data
play()
x <- 4L
class(x)
x <- 1:4
y <- 2:3
z <- x + y
z
class(z)
x <- list(2, "a", "b", TRUE)
x[[2]]
z <- x[[2]]
z
class(z)
x <- c(4, "a", TRUE)
class(x)
x <- c(1,3, 5)  y <- c(3, 2, 10)
x <- c(1,3, 5)
y <- c(3, 2, 10)
rbind(x, y)
swirl()
ls
1
1+2
ls
bye()
play()
x <- c(4, TRUE)
class(x)
x <- list(2, "a", "b", TRUE)
x[[1]]
x <- c(17, 14, 4, 5, 13, 12, 10)
x[x < 10] <- 4
x
x[x < 10] = 4
x
swirl()
bye()
play()
x <- 1:4
y <- 2
z <- x + y
z
x<-4
class(x)
swirl()
bye()
swirl()
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6<7
10 <= 10
5 != 7
!5 == 7
FALSE & FALSE
TRUE & c(RUE, FALSE, FALSE)
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | C(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
Sys.Date()
mean(c(2, 4, 5))
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4, 5, 10))
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate()
submit()
evaluate(sum)
?
submit()
evaluate()
evaluate(floor, 11.1)
submit()
submit()
evaluate()
submit()
bye()
swirl()
submit()
submit()
submit()
skip()
evaluate(sum)
submit()
skip()
evaluate(floor, 11.1)
evaluate(sum, c(2, 4, 6))
submit()
submit()
evaluate()
evaluate(floor, 11.1)
submit()
submit()
submit()
submit()
bye()
swirl()
submit()
rm(list=ls())
submit()
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x) {x+1}, 6)
evaluate(function(x) {x[1]}, c(8, 4, 0))
evaluate(function(x) {x[length(x)]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram("yo R coding")
submit()
mad_libs(x, y, z)
mad_libs(place=x, adjective=y, noun=z)
mad_libs(place, adjective, noun)
mad_libs(place = "London", adjustive = "beautiful", noun = "dog")
submit()
"I"%p"love"%p"R!"
"I"%p"love"%p"R!"
"I" %p% "love" %p% "R!"
dl <- Sys.Date()
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3: "October 17, 1986 08:24"
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
play()
ube <- function(x, n) {
x^3
play()
cube<- function(x, n){ x^3}
cube(3)
bye()
swirl()
play()
cube<- function(x, n){ x^3}
cube(3)
x <- 1:10
if(x > 5){ x <- 0}
f <- function(x){ g <- function(y){ y + z} z <- 4 x +g(x)}
rm(list = ls())
q()
print("hello")
setwd("D:/DATA SCIENCE 2020(R)/1.Data Preprocessing")
source('D:/DATA SCIENCE 2020(R)/1.Data Preprocessing/Data preprocessing.R')
View(dataset)
datset$Country = factor(dataset$Country,
levels = c('France', 'Spain', 'Germany'),
labels = c(1,2,3))
dataset$Country = factor(dataset$Country,
levels = c('France', 'Spain', 'Germany'),
labels = c(1,2,3))
View(dataset)
dataset$Purchased = factor(dataset$Purchased,
levels = c('Yes', 'No'),
labels = c(0, 1))
dataset$Purchased = factor(dataset$Purchased,
levels = c('No', 'Yes'),
labels = c(0, 1))
dataset$Purchased = factor(dataset$Purchased,
levels = c('Yes', 'No'),
labels = c(1, 0))
View(dataset)
dataset$Purchased = factor(dataset$Purchased,
levels = c('Yes', 'No'),
labels = c(1, 0))
dataset$Purchased = factor(dataset$Purchased,
levels = c('Yes', 'No'),
labels = c(1, 0))
dataset$Purchased = factor(dataset$Purchased,
levels = c('No', 'Yes'),
labels = c(0,1))
View(dataset)
source('D:/DATA SCIENCE 2020(R)/1.Data Preprocessing/Data preprocessing.R')
View(dataset)
